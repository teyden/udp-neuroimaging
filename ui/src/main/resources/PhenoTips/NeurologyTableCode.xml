<?xml version="1.0" encoding="UTF-8"?>

<!--
 * This file is subject to the terms and conditions defined in file LICENSE,
 * which is part of this source code package.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>NeurologyTableCode</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1459870000000</creationDate>
  <parent>PhenoTips.PatientClass</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1459978052000</date>
  <contentUpdateDate>1459968547000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{
  "sections": [
    {
      "name": "cerebral vasculature",
      "id": "HP:0100659",
      "terms": []
    },
    {
      "name": "cerebral hemorrhage",
      "id": "HP:0001342",
      "terms": []
    },
    {
      "name": "brain calcification",
      "id": "HP:0002514",
      "terms": []
    },
    {
      "name": "corpus callosum",
      "id": "HP:0001273",
      "terms": [
        {
          "name": "hyperplasia",
          "id": "HP:0007074",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "hypoplasia",
          "id": "HP:0002079",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "partial agenesis",
          "id": "HP:0001338"
        },
        {
          "name": "agenesis",
          "id": "HP:0001274"
        },
        {
          "name": "atrophy",
          "id": "HP:0007371",
          "qualifiers": ["spatial_pattern", "severity"]
        }
      ]
    },
    {
      "name": "brainstem",
      "id": "HP:0002363",
      "terms": [
        {
          "name": "hypoplasia",
          "id": "HP:0002365",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "hyperplasia",
          "id": "HP:0012755",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "abnormal MRI signal",
          "id": "HP:0012747",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "atrophy/degeneration",
          "id": "HP:0007366",
          "qualifiers": ["spatial_pattern", "severity"]
        }
      ]
    },
    {
      "name": "cerebellum",
      "id": "HP:0001317",
      "terms": [
        {
          "name": "hemisphere atrophy",
          "id": "HP:0008278",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "vermis atrophy",
          "id": "HP:0006855",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "hemisphere hypoplasia",
          "id": "HP:0100307",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "vermis hypolasia",
          "id": "HP:0001320",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "cerebellar gliosis",
          "id": "HP:0012698",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "swelling/edema",
          "id": "swelling/edema of the cerebellum",
          "qualifiers": ["spatial_pattern", "severity"]
        }
      ]
    },
    {
      "name": "cisterns",
      "id": "Abnormality of the cisterns",
      "terms": [
        {
          "name": "enlarged cisterns",
          "id": "HP:0100952",
          "qualifiers": ["spatial_pattern", "severity"]
        }
      ]
    },
    {
      "name": "subarachnoid/csf space",
      "id": "HP:0012703",
      "terms": [
        {
          "name": "enlarged cerebral subarachnoid space",
          "id": "HP:0012766",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "enlarged cerebellar subarachnoid space",
          "id": "HP:0012765",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "arachnoid cyst",
          "id": "HP:0100702"
        }
      ]
    },
    {
      "name": "ventricles",
      "id": "HP:0002118",
      "terms": [
        {
          "name": "ventriculomegaly",
          "id": "HP:0002119",
          "qualifiers": ["spatial_pattern", "severity"]
        }
      ]
    },
    {
      "name": "cerebral cortex",
      "id": "HP:0002538",
      "terms": [
        {
          "name": "atrophy",
          "id": "HP:0002120",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "dysgenesis/migration abnormality",
          "id": "cerebral cortex - dysgenesis/migration abnormality"
        },
        {
          "name": "enlarged hippocampus",
          "id": "HP:0100961",
          "qualifiers": ["spatial_pattern", "severity"]
        }
      ]
    },
    {
      "name": "white matter",
      "id": "HP:0002500",
      "terms": [
        {
          "name": "hypomyelination",
          "id": "HP:0006808",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "demyelination",
          "id": "HP:0007258",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "dysmyelination",
          "id": "HP:0007266",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "delayed myelination",
          "id": "HP:0002188",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "white matter atrophy",
          "id": "HP:0012762",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "white matter gliosis",
          "id": "HP:0002171",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "PVL",
          "id": "HP:0006970",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "hypermyelination",
          "id": "HP:0012754",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "cerebral edema",
          "id": "HP:0002181",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "hypointensity of cerebral white matter on MRI",
          "id": "HP:0007103",
          "qualifiers": ["spatial_pattern", "severity"]
        }
      ]
    },
    {
      "name": "basal ganglia",
      "id": "HP:0002134",
      "terms": [
        {
          "name": "large basal ganglia",
          "id": "HP:0007048"
        },
        {
          "name": "small basal ganglia",
          "id": "HP:0012697"
        },
        {
          "name": "abnormal MRI signal (basal ganglia)",
          "id": "HP:0012751"
        },
        {
          "name": "dysgenesis",
          "id": "basal ganglia - dysgenesis"
        },
        {
          "name": "swelling/edema",
          "id": "basal ganglia - swelling/edema"
        }
      ]
    },
    {
      "name": "thalami",
      "id": "HP:0010663",
      "terms": [
        {
          "name": "abnormal thalamic size",
          "id": "HP:0012693",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "abnormal MRI signal (thalami)",
          "id": "HP:0012696",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "dysgenesis",
          "id": "thalami - dysgenesis",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "swelling/edema",
          "id": "thalami - swelling/edema",
          "qualifiers": ["spatial_pattern", "severity"]
        }
      ]
    },
    {
      "name": "hypothalamus",
      "id": "HP:0012286",
      "terms": [
        {
          "name": "hypothalamic atrophy",
          "id": "hypothalamic atrophy",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "hypothalamic gliosis",
          "id": "hypothalamic gliosis",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "hypothalamic dysgenesis",
          "id": "hypothalamic dysgenesis",
          "qualifiers": ["spatial_pattern", "severity"]
        }
      ]
    },
    {
      "name": "olfactory apparatus",
      "id": "abnormality of the olfactory apparatus",
      "terms": []
    },
    {
      "name": "ophthalmic apparatus",
      "id": "abnormality of the ophthalmic apparatus",
      "terms": [
        {
          "name": "abnormality of optic nerve",
          "id": "HP:0000587",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "abnormality of the eye",
          "id": "HP:0000478",
          "qualifiers": ["spatial_pattern", "severity"]
        }
      ]
    },
    {
      "name": "pituitary gland",
      "id": "HP:0012503",
      "terms": [
        {
          "name": "enlarged pituitary gland",
          "id": "HP:0012505",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "small pituitary gland",
          "id": "HP:0012506",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "pituitary tumor/mass",
          "id": "HP:0011750"
        }
      ]
    },
    {
      "name": "abnormality of the pineal gland",
      "id": "HP:0012680",
      "terms": []
    },
    {
      "name": "MR spectroscopy",
      "id": "Abnormality of MR Spectroscopy",
      "terms": [
        {
          "name": "abnormal MRS imaging",
          "id": "HP:0012705"
        },
        {
          "name": "decreased NAA",
          "id": "HP:0012708"
        },
        {
          "name": "elevated NAA",
          "id": "MR spectroscopy - elevated NAA"
        },
        {
          "name": "elevated choline",
          "id": "HP:0012706"
        },
        {
          "name": "decreased choline",
          "id": "MR spectroscopy - decreased choline"
        },
        {
          "name": "elevated creatine",
          "id": "MR spectroscopy - elevated creatine"
        },
        {
          "name": "decreased creatine",
          "id": "MR spectroscopy - decreased creatine"
        },
        {
          "name": "elevated lactate",
          "id": "HP:0012707"
        },
        {
          "name": "decreased lactate",
          "id": "MR spectroscopy - decreased lactate"
        }
      ]
    },
    {
      "name": "Hyperintense MRI",
      "id": "abnormal MRI signal intensity",
      "terms": [
        {
          "name": "iron deposition in brain",
          "id": "HP:0012675",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "copper deposition in brain",
          "id": "HP:0012676",
          "qualifiers": ["spatial_pattern", "severity"]
        }
      ]
    },
    {
      "name": "spine",
      "id": "HP:0000925",
      "terms": [
        {
          "name": "abnormality of the cervical spine",
          "id": "HP:0003319",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "abnormality of the thoracic spine",
          "id": "HP:0100711",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "abnormality of the lumbar spine",
          "id": "HP:0100712",
          "qualifiers": ["spatial_pattern", "severity"]
        },
        {
          "name": "abnormality of the sacrum",
          "id": "HP:0005107",
          "qualifiers": ["spatial_pattern", "severity"]
        }
      ]
    }
  ],
  "qualifiers": {
    "severity": [
      {
        "id": "HP:0012825",
        "name": "Mild"
      },
      {
        "id": "HP:0012826",
        "name": "Moderate"
      },
      {
        "id": "HP:0012828",
        "name": "Severe"
      }
    ],
    "spatial_pattern": [
      {
        "id": "HP:0012837",
        "name": "Generalized"
      },
      {
        "id": "HP:0012838",
        "name": "Localized"
      }
    ]
  }
}</content>
  <object>
    <name>PhenoTips.NeurologyTableCode</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>0e966dd6-fde4-4b8d-9ebe-d800dfb93ca5</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define(
"NeurologyTable",
[
    "react",
    "react-dom",
    "Pikaday",
    "lodash",
    "NeurologyTableSection",
    "NeurologyTableColHeaderCell",
    "NeurologyTableUtils",
    "PhenotypeSelectionUtils",
], function(
    React,
    ReactDOM,
    Pikaday,
    _,
    NeurologyTableSection,
    NeurologyTableColHeaderCell,
    NeurologyTableUtils,
    PhenotypeSelectionUtils
) {
    var NeurologyTable = React.createClass({
        displayName: "NeurologyTable",

        getInitialState: function() {
            var dates = _.uniq(_.map(this.props.initialState, 'date'));
            dates = _.sortBy(dates, function (d) {
                return new Date(d);
            });

            return {
                dates: dates,
                conditions: this.props.initialState
            };
        },

        componentDidMount: function() {
            this.setHiddenInputValue(this.state);
        },

        handleConditionChange: function(conditionId, date, qualifier, value, isChecked) {
            var newState = _.cloneDeep(this.state);
            var existingRecord = _.find(newState.conditions, { id: conditionId, date: date });

            if (qualifier) {
                this.handleQualifierCheckboxChange(newState, existingRecord, qualifier, value, isChecked);
            } else {
                this.handlePresenceCheckboxChange(newState, existingRecord, conditionId, date, value, isChecked);
            }

            this.setState(newState);
        },

        handlePresenceCheckboxChange: function(newState, existingRecord, conditionId, date, value, isChecked) {
            if (isChecked) {
                var observed = value == "observed";
                if (existingRecord) {
                    existingRecord.isObserved = observed;
                    if (!observed) {
                        existingRecord.qualifiers = {};
                    }
                } else {
                    newState.conditions.push({
                        id: conditionId,
                        date: date,
                        isObserved: observed,
                    });
                }

                if (observed) {
                    // Set the section to be abnormal too
                    var sectionId = this.getSectionIdByConditionId(conditionId);
                    if (sectionId) {
                        var sectionRecord = _.find(newState.conditions, { id: sectionId, date: date });
                        if (sectionRecord) {
                            sectionRecord.isObserved = true;
                        } else {
                            newState.conditions.push({
                                id: sectionId,
                                date: date,
                                isObserved: true,
                            });
                        }
                    }
                }
            } else {
                _.pull(newState.conditions, existingRecord);
            }
        },

        handleQualifierCheckboxChange: function(newState, existingRecord, qualifier, value, isChecked) {
            if (isChecked) {
                existingRecord.qualifiers = existingRecord.qualifiers || {};
                existingRecord.qualifiers[qualifier] = value;
            } else {
                delete existingRecord.qualifiers[qualifier];
            }
        },

        handleNoteChange: function(conditionId, newNote, date) {
            var newState = _.cloneDeep(this.state);
            var existingRecord = _.find(newState.conditions, { id: conditionId, date: date });

            existingRecord.comments = newNote;

            this.setState(newState);
        },

        handleColDateChange: function(oldDate, newDate) {
            var newState = _.cloneDeep(this.state);

            _.forEach(newState.conditions, function(v, k) {
                if (v.date == oldDate) {
                    v.date = newDate;
                }
            });

            var existingDateIdx = _.indexOf(newState.dates, oldDate);
            if (existingDateIdx &gt; -1) {
                newState.dates[existingDateIdx] = newDate;
            }

            newState.dates = _.sortBy(newState.dates, function (d) {
                return new Date(d.replace(/-(\d)(?=-|$)/g, '-0$1'));
            });

            this.setState(newState);
        },

        handleAddColClick: function(e) {
            e.preventDefault();
            var newState = _.cloneDeep(this.state);

            var newDate = new Date();
            newDate.setHours(0, 0, 0, 0);
            var checkDupes = function(d) {
                return (NeurologyTableUtils.stringToDate(d).getTime() == newDate.getTime());
            }
            while (_.find(newState.dates, checkDupes)) {
                newDate.setTime(newDate.getTime() + 86400000);
            }
            newState.dates.push(NeurologyTableUtils.dateToString(newDate));

            this.setState(newState);
        },

        handleRemoveColClick: function(date) {
            var newState = _.cloneDeep(this.state);

            _.pull(newState.dates, date);
            _.remove(newState.conditions, _.matchesProperty('date', date));

            this.setState(newState);
        },

        getSectionIdByConditionId: function(conditionId) {
            var section = _.find(this.props.config.sections, function(section, idx, sections) {
                if (section.id == conditionId) { // this condition is actually a section
                    return false;
                } else if(_.find(section.terms, {'id': conditionId})) {
                    return true;
                }
            });

            return section ? section.id : undefined;
        },

        setHiddenInputValue: function(state) {
            document.getElementById('neurology_table_state').value = JSON.stringify({
                "neurology": state.conditions
            });
        },

        componentWillUpdate: function(nextProps, nextState) {

            this.setHiddenInputValue(nextState);
            var curPhenotypes = NeurologyTableUtils.getPhenotypesForFeatures(this.state.conditions, this.state.dates);
            var nextPhenotypes = NeurologyTableUtils.getPhenotypesForFeatures(nextState.conditions, nextState.dates);
            NeurologyTableUtils.updateSelectedPhenotypes(curPhenotypes, nextPhenotypes);
        },

        render: function() {
            var _this = this;
            var colHeaderCells = this.state.dates.map(function (date) {
                return React.createElement(
                    NeurologyTableColHeaderCell,
                    {
                        key: date,
                        date: date,
                        onDateChange: _this.handleColDateChange,
                        onRemove: _this.handleRemoveColClick
                    });
            });
            var sections = _.map(this.props.config.sections, function (val, idx, col) {
                return React.createElement(NeurologyTableSection, {
                    key: val.id,
                    section: val,
                    qualifiersToValues: _this.props.config.qualifiers,
                    conditions: _this.state.conditions,
                    dates: _this.state.dates,
                    onConditionChange: _this.handleConditionChange,
                    onNoteChange: _this.handleNoteChange
                });
            });

            return React.createElement(
                "table",
                { id: "neurology-table" },
                React.createElement(
                    "thead",
                    null,
                    React.createElement(
                        "tr",
                        null,
                        React.createElement("th", null),
                        colHeaderCells,
                        React.createElement(
                            "th",
                            null,
                            React.createElement(
                                "button",
                                {
                                    onClick: this.handleAddColClick
                                },
                                React.createElement("i", { "className": "fa fa-plus" })
                            )
                        )
                    )
                ),
                sections
            );
        }
    });

    return NeurologyTable;
});</code>
    </property>
    <property>
      <name>NeurologyTable</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.NeurologyTableCode</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>11c030d0-1779-44d5-a6e6-a4568b155a16</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define(
"NeurologyTableColHeaderCell",
[
    "react",
    "react-dom",
    "Pikaday",
    "NeurologyTableUtils"
], function(
    React,
    ReactDOM,
    Pikaday,
    NeurologyTableUtils
) {
    return React.createClass({
        displayName: "ColHeaderCell",

        handleChange: function() {
            var newDate = this.datePicker.getDate();
            var newDateStr = NeurologyTableUtils.dateToString(newDate);

            this.props.onDateChange(this.props.date, newDateStr);
        },

        handleClickRemove: function(e) {
            e.preventDefault();

            var date = this.props.date; 
            var onRemove = this.props.onRemove;

            new XWiki.widgets.ConfirmationBox(
                {
                    onYes: function() {
                        onRemove(date);
                    },
                    onNo: function() { }
                },
                {
                    confirmationText: "Are you sure you want to delete this column?",
                    yesButtonText: "Yes, I confirm", 
                    noButtonText: "No, cancel"
                }
            );
        },

        render: function () {
            var dateInput = React.createElement(
                "input",
                {
                    type: "text",
                    defaultValue: this.props.date,
                    ref: "date"
                },
                null
            );

            var removeButton = React.createElement(
                "button",
                {
                    className: 'remove',
                    onClick: this.handleClickRemove
                },
                React.createElement("i", { "className": "fa fa-times" })
            );

            return React.createElement(
                "th",
                null,
                dateInput,
                removeButton
            );
        },
        
        componentDidMount: function() {
            this.datePicker = new Pikaday({
                field: ReactDOM.findDOMNode(this.refs.date),
                format: 'YYYY-MM-DD',
                yearRange: [1950, new Date().getFullYear()],
                onSelect: this.handleChange,
                defaultDate: NeurologyTableUtils.stringToDate(this.props.date),
                setDefaultDate: true,
            });

            var datePicker = this.datePicker; 
            var input = ReactDOM.findDOMNode(this.refs.date);

            input.addEventListener('keydown', function(e) { 
                if (e.keyCode == '13') {
                    input.blur();
                    datePicker.hide(); 
                }
            });
        },
    });
});
</code>
    </property>
    <property>
      <name>NeurologyTableColHeaderCell</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.NeurologyTableCode</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>c7628cec-1322-4a7b-9b75-88221c0c384b</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define(
"NeurologyTableSection",
[
    "react",
    "react-dom",
    "lodash",
    "NeurologyTableSectionRow",
    "NeurologyTableSectionHeaderRow"
], function(
    React,
    ReactDOM,
    _,
    NeurologyTableSectionRow,
    NeurologyTableSectionHeaderRow
) {
    var NeurologyTableSection = React.createClass({
        displayName: "Section",

        render: function () {
            var _this = this;

            var conditionsRows = _.map(this.props.section.terms, function (condition, condIdx) {
                return React.createElement(NeurologyTableSectionRow, {
                    key: condition.id || condition.name,
                    name: condition.name,
                    id: condition.id,
                    qualifiers: condition.qualifiers,
                    qualifiersToValues: _this.props.qualifiersToValues,
                    conditions: _.filter(_this.props.conditions, { id: condition.id }),
                    dates: _this.props.dates,
                    onConditionChange: _this.props.onConditionChange,
                    onNoteChange: _this.props.onNoteChange
                });
            });

            return React.createElement(
                "tbody",
                { className: "group" },
                React.createElement(NeurologyTableSectionHeaderRow, {
                    key: this.props.section.id || this.props.section.name,
                    section: this.props.section,
                    conditions: this.props.conditions,
                    dates: this.props.dates,
                    onConditionChange: _this.props.onConditionChange,
                    onNoteChange: _this.props.onNoteChange
                }),
                conditionsRows
            );
        }
    });

    return NeurologyTableSection;
});
</code>
    </property>
    <property>
      <name>NeurologyTableSection</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.NeurologyTableCode</name>
    <number>3</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>9440f80e-0a8c-47d3-8c8e-9b8aa54b05ea</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define(
"NeurologyTableSectionHeaderRow",
[
    "react",
    "lodash",
    "NeurologyTableSectionHeaderRowCell"
], function(
    React,
    _,
    NeurologyTableSectionHeaderRowCell
) {
    var NeurologyTableSectionHeaderRow = React.createClass({
        displayName: "HeaderRow",

        render: function () {
            var _this = this;
            var cells = _.map(this.props.dates, function (val, idx, col) {
                return React.createElement(NeurologyTableSectionHeaderRowCell, {
                    key: _this.props.section.id + val,
                    section: _this.props.section,
                    date: val,
                    conditions: _this.props.conditions,
                    onConditionChange: _this.props.onConditionChange,
                    onNoteChange: _this.props.onNoteChange
                });
            });

            return React.createElement(
                "tr",
                { className: "term-header" },
                React.createElement(
                    "th",
                    null,
                    this.props.section.name
                ),
                cells,
                React.createElement(
                    "td",
                    {className: "empty"},
                    null
                )
            );
        }
    });

    return NeurologyTableSectionHeaderRow;
});
</code>
    </property>
    <property>
      <name>NeurologyTableSectionHeaderRow</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.NeurologyTableCode</name>
    <number>4</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>b22afe0a-9104-4338-965e-c03b073c2eca</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define(
"NeurologyTableSectionHeaderRowCell",
[
    "react",
    "react-dom",
    "lodash",
    "NeurologyTableSectionRowCellNote"
], function(
    React,
    ReactDOM,
    _,
    NeurologyTableSectionRowCellNote
) {
    var NeurologyTableSectionHeaderRowCell = React.createClass({
        displayName: "Cell",

        handleCheckboxChange: function (e) {
            this.props.onConditionChange(this.props.section.id, this.props.date, null, e.target.value, e.target.checked);
        },

        handleNoteChange: function(newNote) {
            this.props.onNoteChange(this.props.section.id, newNote, this.props.date);
        },

        render: function () {
            var thisSectionConditions = _.map(this.props.section.terms, 'id');
            var _this = this;
            var matchingConditions = _.filter(this.props.conditions, function(condition) {
                var match = condition.date == _this.props.date;
                match &amp;= _.indexOf(thisSectionConditions, condition.id) &gt; -1;
                match &amp;= condition.isObserved;
                return match;
            });

            var thisCondition = _.find(this.props.conditions, {id: this.props.section.id, date: this.props.date});
            var notes = React.createElement(
                NeurologyTableSectionRowCellNote,
                {
                    note: thisCondition &amp;&amp; thisCondition.comments || null,
                    onNoteChange: this.handleNoteChange,
                },
                null
            );

            var classNames = [];
            if (thisCondition) {
                classNames.push("is-investigated");
            }

            return React.createElement(
                "td",
                {className: classNames.join(' ')},
                React.createElement(
                    "label",
                    null,
                    React.createElement(
                        "input",
                        {
                            type: "checkbox",
                            onChange: this.handleCheckboxChange,
                            checked: thisCondition &amp;&amp; !thisCondition.isObserved,
                            disabled: matchingConditions.length &gt; 0,
                            value: "notObserved"
                        }
                    ),
                    "Normal"
                ),
                React.createElement(
                    "label",
                    null,
                    React.createElement(
                        "input",
                        {
                            type: "checkbox",
                            onChange: this.handleCheckboxChange,
                            checked: thisCondition &amp;&amp; thisCondition.isObserved,
                            disabled: matchingConditions.length &gt; 0,
                            value: "observed"
                        }
                    ),
                    "Abnormal"
                ),
                notes
            );
        }
    });

    return NeurologyTableSectionHeaderRowCell;
});
</code>
    </property>
    <property>
      <name>NeurologyTableSectionHeaderRowCell</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.NeurologyTableCode</name>
    <number>5</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>0a0d01d7-1125-4be2-8a51-194103d2d202</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define(
"NeurologyTableSectionRow",
[
    "react",
    "lodash",
    "NeurologyTableSectionRowCell"
], function(
    React,
    _,
    NeurologyTableSectionRowCell
) {
    var NeurologyTableSectionRow = React.createClass({
        displayName: "Row",

        render: function () {

            var _this = this;
            var cells = _.map(this.props.dates, function (val, idx, col) {
                return React.createElement(NeurologyTableSectionRowCell, {
                    key: _this.props.id + val,
                    date: val,
                    name: _this.props.name,
                    id: _this.props.id,
                    qualifiers: _this.props.qualifiers,
                    qualifiersToValues: _this.props.qualifiersToValues,
                    conditions: _.filter(_this.props.conditions, { id: _this.props.id }),
                    onConditionChange: _this.props.onConditionChange,
                    onNoteChange: _this.props.onNoteChange,
                });
            });

            return React.createElement(
                "tr",
                { className: "term-child" },
                React.createElement(
                    "th",
                    null,
                    this.props.name
                ),
                cells,
                React.createElement(
                    "td",
                    {className: "empty"},
                    null
                )
            );
        }
    });

    return NeurologyTableSectionRow;
});
</code>
    </property>
    <property>
      <name>NeurologyTableSectionRow</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.NeurologyTableCode</name>
    <number>6</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>8f80677e-faa7-40a2-a7b8-ccb499879f95</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define(
"NeurologyTableSectionRowCell",
[
    "react",
    "lodash",
    "NeurologyTableSectionRowCellNote"
], function(
    React,
    _,
    NeurologyTableSectionRowCellNote
) {
    var NeurologyTableSectionRowCell = React.createClass({
        displayName: "Cell",

        handleCheckboxChange: function (qualifier, e) {
            this.props.onConditionChange(
                this.props.id,
                this.props.date,
                qualifier,
                e.target.value,
                e.target.checked
            );
        },

        handleNoteChange: function(newNote) {
            this.props.onNoteChange(this.props.id, newNote, this.props.date);
        },

        render: function () {
            var qualCheckboxes, presenceCheckboxes;
            var thisCondition = _.find(this.props.conditions, { date: this.props.date });
            if (this.props.qualifiers &amp;&amp; this.props.qualifiers.length) {
                var _this = this;

                qualCheckboxes = _.map(this.props.qualifiers, function(qual, qualIdx) {
                    var qualVals = _.map(_this.props.qualifiersToValues[qual], function(qualVal, qualValIdx) {
                        var isChecked = !!thisCondition
                            &amp;&amp; !!thisCondition.qualifiers
                            &amp;&amp; !!thisCondition.qualifiers[qual]
                            &amp;&amp; thisCondition.qualifiers[qual] == qualVal.id;

                        return React.createElement(
                            "label",
                            { key: qualVal.name },
                            React.createElement("input", {
                                type: "checkbox",
                                onChange: _.partial(_this.handleCheckboxChange, qual),
                                checked: isChecked,
                                value: qualVal.id
                            }),
                            qualVal.name
                        );
                    });

                    return React.createElement("div",
                        {
                            key: qual,
                            className: 'qualifier-group'
                        },
                        qualVals
                    );
                });
            }
            presenceCheckboxes = React.createElement("div",
                {
                    key: "presence",
                    className: 'presence'
                },
                React.createElement(
                    "label",
                    { key: "present" },
                    React.createElement("input", {
                        type: "checkbox",
                        onChange: _.partial(this.handleCheckboxChange, null),
                        checked: thisCondition &amp;&amp; thisCondition.isObserved,
                        value: "observed"
                    }),
                    "Present"
                ),
                React.createElement(
                    "label",
                    { key: "not-present" },
                    React.createElement("input", {
                        type: "checkbox",
                        onChange: _.partial(this.handleCheckboxChange, null),
                        checked: thisCondition &amp;&amp; !thisCondition.isObserved,
                        value: "notObserved"
                    }),
                    "Not present"
                )
            );

            var note = React.createElement(
                NeurologyTableSectionRowCellNote,
                {
                    note: thisCondition &amp;&amp; thisCondition.comments || null,
                    onNoteChange: this.handleNoteChange,
                },
                null
            );

            var classNames = [];
            if (thisCondition) {
                classNames.push("is-investigated");

                if (thisCondition.isObserved) {
                    classNames.push("is-observed");
                }
            }

            return React.createElement(
                "td",
                { className: classNames.join(' ') },
                presenceCheckboxes,
                qualCheckboxes,
                note
            );
        }
    });

    return NeurologyTableSectionRowCell;
});
</code>
    </property>
    <property>
      <name>NeurologyTableSectionRowCell</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.NeurologyTableCode</name>
    <number>7</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>3f397c05-65b3-421e-8073-9efaa402a6ca</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define(
"NeurologyTableSectionRowCellNote",
[
    "react",
    "lodash",
    "react-bootstrap"
], function(
    React,
    _,
    ReactBootstrap
) {
    var NeurologyTableSectionRowCellNote = React.createClass({
        displayName: "Note",

        onTextAreaKeypress: function(e) {
            if (e.charCode == 13) {
                e.preventDefault();
                this.refs.popoverTrigger.hide();
            }
        },

        onPopoverReady: function() {
            this.refs.noteField.focus();
        },

        // source: http://stackoverflow.com/questions/4715762/javascript-move-caret-to-last-character
        moveCaretToEnd: function(el) {
            if (typeof el.selectionStart == "number") {
                el.selectionStart = el.selectionEnd = el.value.length;
            } else if (typeof el.createTextRange != "undefined") {
                el.focus();
                var range = el.createTextRange();
                range.collapse(false);
                range.select();
            }
        },

        onTextAreaFocus: function(e) {
            this.moveCaretToEnd(e.target);
        },

        onPopoverHide: function() {
            this.props.onNoteChange(this.refs.noteField.value);
        },

        render: function () {
            var currentNote, trigger;
            if (!this.props.note) {
                currentNote = null;
                trigger = React.createElement(
                    "button",
                    {
                      className: "add",
                      onClick: function(e) { e.preventDefault(); }
                    },
                    "+ Add note"
                );
            } else {
                currentNote = React.createElement(
                    "span",
                    { className: "content" },
                    this.props.note
                );
                trigger = React.createElement(
                    "button",
                    {
                      className: "edit",
                      onClick: function(e) { e.preventDefault(); }
                    },
                    React.createElement("i", { "className": "fa fa-pencil" })
                );
            }
            var popover = React.createElement(
                ReactBootstrap.Popover,
                {
                    placement: "right",
                },
                React.createElement(
                    "textarea",
                    {
                        defaultValue: this.props.note,
                        onKeyPress: this.onTextAreaKeypress,
                        onFocus: this.onTextAreaFocus,
                        ref: "noteField",
                        cols: 25,
                        rows: 8
                    },
                    null
                )
            );

            return React.createElement(
                "p",
                { className: "note" },
                currentNote,
                React.createElement(
                    ReactBootstrap.OverlayTrigger,
                    {
                        trigger: "click",
                        placement: this.props.note ? "left" : "right",
                        overlay: popover,
                        rootClose: true,
                        animation: true,
                        delay: 10,
                        ref: "popoverTrigger",
                        onEntered: this.onPopoverReady,
                        onExit: this.onPopoverHide
                    },
                    trigger
                )
            );
        }
    });

    return NeurologyTableSectionRowCellNote;
});
</code>
    </property>
    <property>
      <name>NeurologyTableSectionRowCellNote</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.NeurologyTableCode</name>
    <number>8</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>712f4c40-bf75-44ff-9afa-09e90c303981</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>require.config({
  paths: {
    "react": "$services.webjars.url('react', 'react.min.js')",
    "react-dom": "$services.webjars.url('react', 'react-dom.min.js')",
    "react-bootstrap": "$services.webjars.url('react-bootstrap', 'react-bootstrap.min.js')",
    "Pikaday": "$services.webjars.url('org.webjars.npm:pikaday', 'pikaday.js')",
    "lodash": "$services.webjars.url('org.webjars.bower:lodash', 'dist/lodash.min.js')"
  },
});

require(['react', 'react-dom', 'NeurologyTable'], function(React, ReactDOM, NeurologyTable) {
  var config = $xwiki.getDocument("PhenoTips.NeurologyTableCode").getContent();

  var initialState = JSON.parse(document.getElementById('neurology-table-container').getAttribute('data-init'));

  var init = function() {
    ReactDOM.render(React.createElement(NeurologyTable, { config: config, initialState: initialState }), document.getElementById('neurology-table-container'));
  };

  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);
});</code>
    </property>
    <property>
      <name>Initialization</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.NeurologyTableCode</name>
    <number>9</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>6d08a253-0c57-43f6-9860-a46684c8f983</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define("NeurologyTableUtils", ["PhenotypeSelectionUtils"], function(PhenotypeSelectionUtils) {
    return {
        dateToString: function(date) {
            return date.getFullYear() + '-' + (date.getMonth()+1) + '-' + date.getDate();
        },

        stringToDate: function(str) {
            var dateParts = str.split('-');
            return new Date(dateParts[0], dateParts[1]-1, dateParts[2]);
        },

        getPhenotypesForFeatures: function(features, dates) {
            var getAggregateTermMetadata = function(terms) {
                terms = _.sortBy(terms, function (term) {
                    return new Date(term.date);
                });
                var allQualifiers = _.cloneDeep(_.map(terms, 'qualifiers'));
                return _.assign.apply(_, allQualifiers);
            };

            var phenotypes = [];

            var featuresById = _.groupBy(features, 'id');

            _.each(featuresById, function(features, id) {
                if (_.find(features, 'isObserved')) {
                    var phenotype = {id: id, isObserved: true};
                    phenotype.qualifiers = getAggregateTermMetadata(_.filter(features, 'isObserved'));
                    phenotypes.push(phenotype);
                } else {
                    var hasNegated = _.every(dates, function(date) {
                        return _.find(features, {isObserved: false, date: date});
                    });
                    hasNegated &amp;&amp; phenotypes.push({id: id, isObserved: false});
                }
            });

            return phenotypes;
        },

        updateSelectedPhenotypes: function(curPhenotypes, nextPhenotypes) {
            var toAdd = _.differenceWith(nextPhenotypes, curPhenotypes, _.isEqual);
            var toRemove = _.differenceWith(curPhenotypes, nextPhenotypes, _.isEqual);

            var idIsHpoTerm = function(id) {
                return /^HP:.+$/.test(id);
            };

            _.each(toRemove, function(phenotype) {
                if (!idIsHpoTerm(phenotype.id)) {
                    return;
                }
                PhenotypeSelectionUtils.deselectPhenotype(phenotype);
            });
            _.each(toAdd, function(phenotype) {
                if (!idIsHpoTerm(phenotype.id)) {
                    return;
                }
                PhenotypeSelectionUtils.selectPhenotype(phenotype, 'neurology features');
            });
        }
    };
});</code>
    </property>
    <property>
      <name>NeurologyTableUtils</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.NeurologyTableCode</name>
    <number>10</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>28d6e323-d40f-4a43-a287-5b04240dff39</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define("PhenotypeSelectionUtils", [], function() {
  return {
    /*
      phenotype data structure:
      id &lt;- an HPO id or arbitrary text
      isObserved &lt;- boolean describing whether or not the phenotype was observed
      qualifiers: {
        spatial_pattern &lt;- HPO ID
        severity &lt;- HPO ID
      }
    */

    /**
     * Selects a phenotype. If the phenotype is already selected, do nothing.
     * @param  {object} phenotype         the phenotype. see object spec above.
     * @param  {string} autoSelectSrcDesc a string describing the reason for auto-selection of this phenotype, if applicable.
     */
    selectPhenotype: function(phenotype, autoSelectSrcDesc) {
      var _this = this;
      var addAutomaticSelectionIndicator = function(phenotypeEl) {
        var addedItem = $('current-phenotype-selection').down('label input[value="' + phenotypeEl.value + '"]');
        if (addedItem &amp;&amp; autoSelectSrcDesc) {
          addedItem.up('label').insert({before : new Element('span', {
                                                               'class' : 'fa fa-bolt',
                                                               'title' : 'This phenotype was automatically added based on ' + autoSelectSrcDesc
          }).update(' ')});
        }
      };

      var existingEl = this._findFormElementForPhenotype(phenotype.id, !phenotype.isObserved);
      if (existingEl) {
        if (existingEl._ynpicker) {
          existingEl._ynpicker._select(phenotype.isObserved ? 'yes' : 'no');
        } else {
          existingEl.checked = true;
        }
        addAutomaticSelectionIndicator(existingEl);
      } else {
        var suggestWidget = $("quick-phenotype-search")._suggestWidget;
        if (!suggestWidget) {
           return null;
        }
        var id = phenotype.id;
        var searchUrl = new XWiki.Document('SolrService', 'PhenoTips').getURL("get", "q=" + id);
        new Ajax.Request(searchUrl, {
          method: 'get',
          onSuccess: function(transport) {
            var response = transport.responseJSON.rows[0];
            if (response) {
              var categories = "";
              if (!phenotype.isObserved) {
                categories += '&lt;input type="hidden" name="fieldName" value="PhenoTips.PatientClass_0_negative_phenotype" class="no"&gt;';
              }
              categories += '&lt;span class="hidden term-category"&gt;';
              response.term_category.each(function(category){categories += '&lt;input type="hidden" value="' + category + '"&gt;';});
              categories += "&lt;/span&gt;";
              var data = {
                id: id,
                value: response.name,
                category: categories,
                negative: !phenotype.isObserved
              };
              var title = response.name;
              suggestWidget.acceptEntry(data, title, title, true);

              existingEl = _this._findFormElementForPhenotype(phenotype.id, !phenotype.isObserved);
              addAutomaticSelectionIndicator(existingEl);
            }
          }
        });
      }
    },

    /**
     * Deselects a phenotype. If the phenotype is not selected, do nothing.
     * @param  {object} phenotype the phenotype. see object spec above.
     */
    deselectPhenotype: function(phenotype) {
      var phenotypeEl = this._findFormElementForPhenotype(phenotype.id, !phenotype.isObserved);
      if (phenotypeEl) {
        if (phenotypeEl) {
          phenotypeEl._ynpicker._onUnselect();
        } else {
          phenotypeEl.checked = false;
        }
      }
    },

    /**
     * Updates a selected phenotype. If the phenotype is not selected, do nothing.
     */
    /*updateSelectedPhenotype: function(phenotype) {
    },*/

    _findFormElementForPhenotype: function(id, negative, subtype) {
      var result = null;
      if ($('prefix')) {
        result = $($('prefix').value + (negative ? 'negative_' : '') + (subtype ? subtype + '_' : '') + 'phenotype_' + id);
      }
      return result;
    },
  };
});</code>
    </property>
    <property>
      <name>PhenotypeSelectionUtils</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.NeurologyTableCode</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>85c8cebe-ca70-400e-b9f7-0622ca4f2f05</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#neurology-table {
  border-collapse: collapse;
  background-color: #f9f9f9;
}
#neurology-table td, #neurology-table th {
  padding: 6px;
  border: 1px solid #aaa;
  text-align: left;
  vertical-align: top;
}
#neurology-table td.empty {
  border: 0;
}
#neurology-table th {
  text-align: right;
}
#neurology-table thead th {
  text-align: left;
}
#neurology-table thead th input {
  width: 80%;
}
#neurology-table thead th button {
  float: right;
}
#neurology-table tbody.group tr:first-child th,
#neurology-table tbody.group tr:first-child td {
  border-top-width: 5px;
}
#neurology-table .term-child th {
  font-weight: normal;
  font-style: italic;
}
#neurology-table td label {
  font-weight: normal;
  margin-right: 0.3em;
}
#neurology-table .term-header td.disabled {
  color: #999;
}
#neurology-table td div.presence {
  border-bottom: 1px dashed #aaa;
  margin-bottom: 0.3em;
  padding-bottom: 0.3em;
}
#neurology-table td div.qualifier-group {
  border-bottom: 1px dotted #aaa;
  margin-bottom: 0.3em;
  padding-bottom: 0.3em;
  visibility: hidden;
}
#neurology-table td.is-observed div.qualifier-group {
  visibility: visible;
}
#neurology-table td div.qualifier-group label {
  display: block;
}
.editbody #neurology-table td .note {
  visibility: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  width: 200px;
  margin: 0;
  margin-top: 5px;
  font-size: 12px;
  position: relative;
  padding-right: 26px;
  height: 1.8em;
}
.editbody #neurology-table td.is-investigated .note {
  visibility: visible;
}
#neurology-table td .note .content {
  line-height: 17px;
}
.editbody #neurology-table td .note button {
  font-size: 11px;
}
.editbody #neurology-table td .note button.edit {
  position: absolute;
  right: 0; top: 0;
  font-size: 80%;
}
.popover textarea {
  font-size: 90%;
  font-family: sans-serif;
  white-space: pre-wrap;
  word-wrap: break-word;
  overflow: auto;
}
.viewbody #neurology-table td, .viewbody #neurology-table th {
  border: 1px solid #aaa; border-right-width: 0;
  vertical-align: top;
}
.viewbody #neurology-table td:last-child, .viewbody #neurology-table th:last-child {
  border-right-width: 1px;
}
.viewbody #neurology-table .term-header td.observed {
  border-left-color: red;
  border-top-color: red;
}
.viewbody #neurology-table .term-header td.not-observed {
  border-left-color: green;
  border-top-color: green;
}
.viewbody #neurology-table td .note {
  font-size: 80%;
  text-align: left;
  max-width: 200px;
}
.viewbody #neurology-table td ul {
  margin: 0;
  padding: 0;
  text-align: left;
  list-style: disc inside;
  text-align: left;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>NeurologyTable</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.NeurologyTableCode</name>
    <number>1</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>5a95aa3a-5b34-4bc3-8c3b-d7c4749bbc22</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.fade {
  opacity: 0;
  -webkit-transition: opacity 0.15s linear;
  -o-transition: opacity 0.15s linear;
  transition: opacity 0.15s linear;
}
.fade.in {
  opacity: 1;
}
.collapse {
  display: none;
}
.collapse.in {
  display: block;
}
tr.collapse.in {
  display: table-row;
}
tbody.collapse.in {
  display: table-row-group;
}
.collapsing {
  position: relative;
  height: 0;
  overflow: hidden;
  -webkit-transition-property: height, visibility;
  -o-transition-property: height, visibility;
     transition-property: height, visibility;
  -webkit-transition-duration: 0.35s;
  -o-transition-duration: 0.35s;
     transition-duration: 0.35s;
  -webkit-transition-timing-function: ease;
  -o-transition-timing-function: ease;
     transition-timing-function: ease;
}
.popover {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1060;
  display: none;
  max-width: 276px;
  padding: 1px;
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  font-style: normal;
  font-weight: normal;
  letter-spacing: normal;
  line-break: auto;
  line-height: 1.42857143;
  text-align: left;
  text-align: start;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  white-space: normal;
  word-break: normal;
  word-spacing: normal;
  word-wrap: normal;
  font-size: 14px;
  background-color: #ffffff;
  -webkit-background-clip: padding-box;
          background-clip: padding-box;
  border: 1px solid #cccccc;
  border: 1px solid rgba(0, 0, 0, 0.2);
  border-radius: 6px;
  -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}
.popover.top {
  margin-top: -10px;
}
.popover.right {
  margin-left: 10px;
}
.popover.bottom {
  margin-top: 10px;
}
.popover.left {
  margin-left: -10px;
}
.popover-title {
  margin: 0;
  padding: 8px 14px;
  font-size: 14px;
  background-color: #f7f7f7;
  border-bottom: 1px solid #ebebeb;
  border-radius: 5px 5px 0 0;
}
.popover-content {
  padding: 9px 14px;
}
.popover &gt; .arrow,
.popover &gt; .arrow:after {
  position: absolute;
  display: block;
  width: 0;
  height: 0;
  border-color: transparent;
  border-style: solid;
}
.popover &gt; .arrow {
  border-width: 11px;
}
.popover &gt; .arrow:after {
  border-width: 10px;
  content: "";
}
.popover.top &gt; .arrow {
  left: 50%;
  margin-left: -11px;
  border-bottom-width: 0;
  border-top-color: #999999;
  border-top-color: rgba(0, 0, 0, 0.25);
  bottom: -11px;
}
.popover.top &gt; .arrow:after {
  content: " ";
  bottom: 1px;
  margin-left: -10px;
  border-bottom-width: 0;
  border-top-color: #ffffff;
}
.popover.right &gt; .arrow {
  top: 50%;
  left: -11px;
  margin-top: -11px;
  border-left-width: 0;
  border-right-color: #999999;
  border-right-color: rgba(0, 0, 0, 0.25);
}
.popover.right &gt; .arrow:after {
  content: " ";
  left: 1px;
  bottom: -10px;
  border-left-width: 0;
  border-right-color: #ffffff;
}
.popover.bottom &gt; .arrow {
  left: 50%;
  margin-left: -11px;
  border-top-width: 0;
  border-bottom-color: #999999;
  border-bottom-color: rgba(0, 0, 0, 0.25);
  top: -11px;
}
.popover.bottom &gt; .arrow:after {
  content: " ";
  top: 1px;
  margin-left: -10px;
  border-top-width: 0;
  border-bottom-color: #ffffff;
}
.popover.left &gt; .arrow {
  top: 50%;
  right: -11px;
  margin-top: -11px;
  border-right-width: 0;
  border-left-color: #999999;
  border-left-color: rgba(0, 0, 0, 0.25);
}
.popover.left &gt; .arrow:after {
  content: " ";
  right: 1px;
  border-right-width: 0;
  border-left-color: #ffffff;
  bottom: -10px;
}
</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>bootstrap-popover-custom.css</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
